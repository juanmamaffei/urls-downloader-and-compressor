c
described_class.new(1).run
c
described_class.new(1).run
Petition.first
Petition.count
described_class.new(1).run
described_class.new(petition.id).run
c
described_class.new(petition.id).run
described_class.new(petition.id)
c
described_class.new(petition.id)
described_class
c
OrchestrateCompression.class
OrchestrateCompression
FilesCompressor.class
FilesCompressor
described_class.new(1).run
described_class
c
Dir.mkdir "tmp/1" unless File.exists?("tmp/1")
Dir.mkdir "tmp/1"
Dir.mkdir "tmp/1/"
Dir.mkdir "tmp/1"
Dir.mkdir
      IO.copy_stream(download, "tmp/#{@petition.id}/#{download.base_uri.to_s.split('/')[-1]}")
      IO.copy_stream(download, "tmp/#{@petition.id}-#{download.base_uri.to_s.split('/')[-1]}")
      IO.copy_stream(download, "tmp/#{@petition.id}/#{download.base_uri.to_s.split('/')[-1]}")
IO.copy_stream(download, "tmp/1")
      IO.copy_stream(download, "tmp/#{@petition.id}/#{download.base_uri.to_s.split('/')[-1]}")
IO.copy_stream(download, "tmp/1")
IO.copy_stream(download, "tmp")
IO.copy_stream(download)
download = URI.parse(@subfile.url).open
c
described_class.new(subfile1, petition).run
c
described_class.new(subfile1, petition).run
c
described_class.new(subfile1, petition).run
c
described_class.new(subfile1, petition).run
described_class.new(subfile1).run
c
described_class.new(subfile1).run
c
described_class.new(subfile1).run
c
described_class.new(subfile1).run
described_class.new(subfile1)
described_class.new
c
described_class.new
described_class
c
petition
subfile
assert_select "div>p"
assert_select
    cell_selector = Rails::VERSION::STRING >= '7' ? 'div>p' : 'tr>td'
render
c
result.class
result
